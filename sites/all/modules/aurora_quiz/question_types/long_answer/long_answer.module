<?php

/**
	* This module defines a long answer question type for quizzes.
	*
	* Long answer questions make use of the quiz question framework (quiz_question.module).
	* The functions in this file are largely used for grading long answer questions. Most
	* of the real logic is in long_answer.classes.inc.
	*
	* @file
	*/

/**
	* Implements hook_help().
	*/
function long_answer_help($path, $arg) {
	if ($path == 'admin/help#long_answer') {
		return '<p>' . t('This module provides long-answer (essay, multi-paragraph) questions to the quiz module.') .'</p><p>' . t('A long-answer question is designed to provide the quiz taker a lengthy area to expand on ideas.') . '</p>';
	}
}

/**
	* Implements hook_quiz_question_info().
	*/
function long_answer_quiz_question_info() {
	return array(
		'long_answer' => array(
			'name' => t('Narrative Response question'),
			'description' => t('Quiz questions that allow a user to enter multiple lines or paragraphs of text.'),
			'question provider' => 'LongAnswerQuestion',
			'response provider' => 'LongAnswerResponse',
			'module' => 'quiz_question', // All wrapper functions are in that module.
		),
	);
}

///**
//    * Implements hook_quiz_question_config().
//    */
//function long_answer_quiz_question_config() {
//    $form['long_answer_default_max_score'] = array(
//        '#type' => 'textfield',
//        '#title' => t('Default max score'),
//        '#description' => t('Choose the default maximum score for a narrative response question.'),
//        '#default_value' => 0,
//    );
//    $form['#validate'][] = 'long_answer_config_validate';

//    return $form;
//}

///**
//    * Validate the long_answer config form values
//    */
//function long_answer_config_validate($form, $form_state) {
//    if ($form_state['values']['long_answer_default_max_score'] < 0) {
//        form_set_error('long_answer_default_max_score', t('The default max score must be greater or equal to 0'));
//    }
//}

/**
	* Implements hook_theme().
	*/
function long_answer_theme() {
	return array(
		'long_answer_response_form' => array(
			'render element' => 'form',
			'path' => drupal_get_path('module', 'long_answer') . '/theme',
			'file' => 'long_answer.theme.inc',
		),
	);
}

/**
	* Generate a list of long answer questions
	*
	* @return
	*  array containing nid as key and title as value
	*/
function long_answer_questions_list() {
	$questions = array();
	$results = db_query('SELECT nid, title FROM {node} WHERE type = :type', array(':type' => 'long_answer'));

	foreach ($results as $result) {
		$questions[$result->nid] = check_plain($result->title);
	}

	return $questions;
}

///**
//    * Get the answer for a question.
//    *
//    * This stores a score for a long answer question and marks that question as having been evaluated.
//    * @param $nid
//    *  Node ID of question.
//    * @param $vid
//    *  Version ID of question.
//    * @param $result_id
//    *  Result ID for the quiz results.
//    *
//    * @return Assoc array
//    *  An array if successful, or FALSE if no result could be found. The array contains the following properties:
//    *  <code>
//    *  answer_id; // The answer ID
//    *  answer; // The full text of the answer
//    *  is_evaluated; // 0 if the question has not been evaluated, 1 if it has
//    *  score; // The score the evaluator gave the user; this should be 0 if is_evaluated is 0.
//    *  question_vid
//    *  question_nid
//    *  result_id
//    *  </code>
//    */
//function long_answer_get_answer($question_nid, $question_vid, $result_id) {
//    $result = db_query('SELECT answer_id, answer, la.score, question_vid, question_nid, la.result_id, rel.max_score AS rel_max_score FROM {quiz_long_answer_user_answers} la
//        JOIN {quiz_node_results} qnr ON (la.result_id = qnr.result_id)
//        JOIN {quiz_node_relationship} rel ON (qnr.vid = rel.parent_vid AND rel.child_vid = la.question_vid)
//        WHERE question_nid = :qnid AND question_vid = :qvid AND la.result_id = :rid', array(':qnid' => $question_nid, ':qvid' => $question_vid, ':rid' => $result_id))->fetchAssoc();

//        return $result ? $result : FALSE;
//}

///**
//    * Given a quiz, return a list of all the answers.
//    *
//    * @param $nid
//    *  Node ID for the quiz to check.
//    * @param $vid
//    *  Version ID for the quiz to check.
//    * @param $count
//    *  Number of items to return (default: 50).
//    * @param $offset
//    *  Where in the results we should start (default: 0).
//    *
//    * @return
//    *  Indexed array of result IDs that need to be scored.
//    */
//function long_answer_get_answers_by_question($nid, $vid, $count = 50, $offset = 0) {
//    $results = db_query('SELECT result_id FROM {quiz_long_answer_user_answers} WHERE question_nid = :question_nid AND question_vid = :question_vid', array(':question_nid' => $nid, ':question_vid' => $vid));
//    $answers = array();

//    foreach ($results as $result) {
//        $answers[] = $result->result_id;
//    }

//    return $answers;
//}

///**
//    * Get all quiz scores that have not yet been evaluated.
//    *
//    * @param $count
//    *  Number of items to return (default: 50).
//    * @param $offset
//    *  Where in the results we should start (default: 0).
//    *
//    * @return
//    *  Array of objects describing unanswered questions. Each object will have result_id, question_nid, and question_vid.
//    */
//function long_answer_get_all_unscored_answers($count = 50, $offset = 0) {
//    $unscored = LongAnswerResponse::fetchAllUnscoredAnswers();

//    return $unscored;
//}

///**
//    * Submit function for the report form
//    *
//    * @param $values
//    *   The FAPI $form_state['values']
//    */
//function long_answer_report_submit($values) {
//    long_answer_score_an_answer($values, FALSE);
//}

///**
//    * Implements hook_field_extra_fields().
//    */
//function long_answer_field_extra_fields() {
//    //$extra['node']['long_answer'] = array(
//    //    'form' => array(
//    //        'rubric' => array(
//    //        'label' => t('Rubric'),
//    //        'description' => t('Specify how the answer will be scored.'),
//    //        'weight' => -4,
//    //        ),
//    //    ),
//    //);

//    return $extra;
//}